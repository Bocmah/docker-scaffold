//+build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const (
	blobFileName string = "blob.go"
	embedFolder  string = "../../tmpl"
)

var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package box

// Code generated by go generate; DO NOT EDIT.

func init() {
	{{- range $name, $file := . }}
		box.Add("{{ $name }}", []byte{ {{ conv $file }} })
	{{- end }}
}`))

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		builder.WriteString(fmt.Sprintf("%d,", int(v)))
	}

	return builder.String()
}

func checkEmbedFolderExistence() {
	if _, err := os.Stat(embedFolder); os.IsNotExist(err) {
		log.Fatal("Configs directory does not exist")
	}
}

func embedFiles() map[string][]byte {
	files := make(map[string][]byte)

	// Walking through embed directory
	err := filepath.Walk(embedFolder, func(path string, info os.FileInfo, err error) error {
		relativePath := filepath.ToSlash(strings.TrimPrefix(path, embedFolder))

		if info.IsDir() {
			// Skip directories
			log.Println(path, "is a directory, skipping...")
			return nil
		} else {
			// If elements is a simple file, embed
			log.Println(path, "is a file, packing in...")

			b, err := ioutil.ReadFile(path)
			if err != nil {
				log.Printf("Error reading %s: %s", path, err)
				return err
			}

			// Add file name to map
			files[relativePath] = b
		}

		return nil
	})

	if err != nil {
		log.Fatal("Error walking through embed directory:", err)
	}

	return files
}

func createBlobFile() *os.File {
	f, createErr := os.Create(blobFileName)
	if createErr != nil {
		log.Fatal("Error creating blob file:", createErr)
	}

	return f
}

func executeTemplates(files map[string][]byte) *bytes.Buffer {
	builder := &bytes.Buffer{}

	if err := tmpl.Execute(builder, files); err != nil {
		log.Fatal("Error executing template", err)
	}

	return builder
}

func formatGeneratedCode(code *bytes.Buffer) []byte {
	data, err := format.Source(code.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	return data
}

func writeToBlobFile(code []byte) {
	if err := ioutil.WriteFile(blobFileName, code, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}
}

func main() {
	checkEmbedFolderExistence()

	files := embedFiles()

	f := createBlobFile()
	defer f.Close()

	builder := executeTemplates(files)

	formatted := formatGeneratedCode(builder)

	writeToBlobFile(formatted)
}
